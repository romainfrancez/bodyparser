{"name":"Bodyparser","tagline":"An HTTP(S) request body parser for node.js","body":"BodyParser [![Build Status](https://travis-ci.org/romainfrancez/bodyparser.png?branch=master)](https://travis-ci.org/romainfrancez/bodyparser)\r\n==============================================================================================================================================\r\n\r\nAn HTTP(S) request body parser for node.js\r\n\r\nInstallation\r\n------------\r\n\r\n```\r\ngit clone git://github.com/romainfrancez/bodyparser.git bodyparser\r\n```\r\n\r\nExample\r\n-------\r\n\r\n```javascript\r\nvar\r\n  BodyParser = require('..').BodyParser,\r\n  http = require('http'),\r\n  util = require('util');\r\n\r\nhttp.createServer(function(request, response) {\r\n  if (request.url === '/upload' && request.method === 'POST') {\r\n    var\r\n      bp;\r\n\r\n    // Handle the data automatically according to its type\r\n    bp = new BodyParser(request, function (err, data) {\r\n      response.writeHead(200, {'Content-Type': 'text/html'});\r\n      response.write('<h1>Submitted data</h1>\\n');\r\n      if (data instanceof Buffer) {\r\n        response.write(util.inspect(data.toString()) + '<br/><br/>\\n');\r\n      } else {\r\n        response.write(util.inspect(data) + '<br/><br/>\\n');\r\n      }\r\n      response.write('<a href=\"/\">Back</a>\\n');\r\n      response.end();\r\n    });\r\n    bp.parse();\r\n    return;\r\n  }\r\n  \r\n  \r\n  // For convinience only, a couple of forms\r\n  response.writeHead(200, {'content-type': 'text/html'});\r\n\r\n  switch (request.url) {\r\n    case '/urlencoded':\r\n      response.write('<h1>URLEncoded</h1>\\n');\r\n      response.write('<form action=\"/upload\" enctype=\"application/x-www-form-urlencoded\" method=\"POST\">\\n');\r\n      response.write('\\tHello: <input type=\"text\" name=\"hello\"/><br/>\\n');\r\n      response.write('\\tWorld: <input type=\"text\" name=\"world\"/><br/>\\n');\r\n      response.write('\\t<input type=\"submit\"/>\\n');\r\n      response.write('</form>\\n');\r\n      response.write('<a href=\"/\">Back</a>\\n');\r\n      break;\r\n    \r\n    case '/json':\r\n      response.write('<h1>JSON</h1>\\n');\r\n      response.write('<form action=\"/upload\" enctype=\"application/json\" method=\"POST\">\\n');\r\n      response.write('\\tHello: <input type=\"text\" name=\"hello\"/><br/>\\n');\r\n      response.write('\\tWorld: <input type=\"text\" name=\"world\"/><br/>\\n');\r\n      response.write('\\t<input type=\"submit\"/>');\r\n      response.write('</form>\\n');\r\n      response.write('<a href=\"/\">Back</a>\\n');\r\n      break;\r\n\r\n    case '/raw':\r\n      response.write('<h1>Raw</h1>\\n');\r\n      response.write('<form action=\"/upload\" enctype=\"text/plain\" method=\"POST\">\\n');\r\n      response.write('\\tHello: <input type=\"text\" name=\"hello\"/><br/>\\n');\r\n      response.write('\\tWorld: <input type=\"text\" name=\"world\"/><br/>\\n');\r\n      response.write('\\t<input type=\"submit\"/>');\r\n      response.write('</form>\\n');\r\n      response.write('<a href=\"/\">Back</a>\\n');\r\n      break;\r\n\r\n    default:\r\n      response.write('<h1>Options</h1>\\n');\r\n      response.write('<ul>\\n');\r\n      response.write('\\t<li><a href=\"/urlencoded\">URLEncoded</a></li>\\n');\r\n      response.write('\\t<li><a href=\"/json\">JSON</a></li>\\n');\r\n      response.write('\\t<li><a href=\"/raw\">Raw</a></li>\\n');\r\n      response.write('</ul>\\n');\r\n  }\r\n\r\n  response.end();\r\n}).listen(8000);\r\n```\r\n\r\nTODO\r\n----\r\n\r\n* Finish MultiPartParser\r\n* Finish test cases\r\n* Create benchmark","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}